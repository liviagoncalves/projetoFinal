/ *! jQuery v3.5.1 -ajax, -ajax / jsonp, -ajax / load, -ajax / script, -ajax / var / location, -ajax / var / nonce, -ajax / var / rquery, -ajax / xhr, -manipulação / _evalUrl, obsoleto / alias de eventos do ajax, -effects, -effects / Tween, -effects / animatedSelector | (c) JS Foundation e outros colaboradores | jquery.org/license * /
! function (e, t) {"use strict"; "object" == typeof module && "object" == typeof module.exports? module.exports? module.exports = e.document? t (e,! 0): function (e) {if (! e.document) lança novo erro ("jQuery requer uma janela com um documento"); retorne t (e)}: t (e)} ("indefinido"! = tipo de janela? window: this, function ( g, e) {"use strict"; var t = [], r = Object.getPrototypeOf, s = t.slice, v = t.flat? função (e) {retorna t.flat.call (e)}: função (e) {retornar t.concat.apply ([], e)}, u = t.push, i = t.indexOf, n = {}, o = n.toString, y = n.hasOwnProperty, a = y.toString, l = a.call (Object), m = {}, b = função (e) {return "function" == tipo de e && "número"! = tipo de e.nodeType}, x = função (e) {return null! = e && e === e.window}, w = g.document, c = {type:! 0, src:! 0, nonce:! 0, noModule:! 0}; função C (e, t , n) {var r, i, o = (n = n || w) .criarElement ("script");if (o.text = e, t) para (r em c) (i = t [r] || t.getAttribute && t.getAttribute (r)) && o.setAttribute (r, i); n.head.appendChild (o ) .parentNode.removeChild (o)} função T (e) {return null == e? e + "": "objeto" == tipo de e || "função" == tipo de e? n [o.call (e) ] || "objeto": typeof e} var f = "3.5.1 -ajax, -ajax / jsonp, -ajax / load, -ajax / script, -ajax / var / location, -ajax / var / nonce, - ajax / var / rquery, -ajax / xhr, -manipulation / _evalUrl, -precated / ajax-event-alias, -effects, -effects / Tween, -effects / animatedSelector ", E = function (e, t) {return new E.fn.init (e, t)}; função d (e) {var t = !! e && "comprimento" em e && e.length, n = T (e); return! B (e) &&! X (e ) && ("matriz" === n || 0 === t || "número" == tipo de t && 0 <t && t-1 em e)} E.fn = E.prototype = {jquery: f, construtor: E , comprimento: 0, toArray:function () {return s.call (this)}, get: function (e) {return null == e? s.call (this): e <0? this [e + this.length]: this [e] }, pushStack: function (e) {var t = E.merge (this.constructor (), e); return t.prevObject = this, t}, cada: function (e) {return E.each (this, e )}, map: function (n) {retorna this.pushStack (E.map (this, function (e, t) {retorna n.call (e, t, e)}))}, fatia: function () { retornar this.pushStack (s.apply (this, argumentos))}, primeiro: function () {return this.eq (0)}, last: function () {return this.eq (-1)}, even: function () {return this.pushStack (E.grep (this, function (e, t) {return (t + 1)% 2}))}, ímpar: function () {retorna this.pushStack (E.grep (this , função (e, t) {return t% 2}))}, eq: function (e) {var t = this.length, n = + e + (e <0? t: 0); return this.pushStack ( 0 <= n && n <t? [Isto [n]]: [])}, fim: function () {retorna this.prevObject || this.constructor ()}, push: u, tipo: t.sort, splice: t.splice}, E.extend = E.fn.estender = função () {var e, t, n, r, i, o, a = argumentos [0] || {}, s = 1, u = argumentos. comprimento, l =! 1; for ("booleano" == tipo de a && (l = a, a = argumentos [s] || {}, s ++), "objeto" == tipo de a || b (a) || (a = {}), s === u && (a = this, s -); s <u; s ++) if (null! = (e = argumentos [s])) para (t em e) r = e [t], "__ proto __"! == t && a ! == r && (l && r && (E.isPlainObject (r) || (i = Array.isArray (r)))? (n = a [t], o = i &&! Array.isArray (n)? []: i || E.isPlainObject (n)? N: {}, i =! 1, a [t] = E. extensão (l, o, r)): void 0! == r && (a [t] = r) ); return a}, E.extend ({expando: "jQuery" + (f + Math.random ()). replace (/ \ D / g, ""), isReady:! 0, erro: function (e) {lança novo Erro (e)}, noop: function () {}, isPlainObject: function (e) {var t, n; return! (! e || "[objeto Objeto]"! == o.call (e )) && (! (t = r (e)) || "função" == typeof (n = y.call (t, "construtor") && t.constructor) && a.call (n) === l)}, isEmptyObject: function (e) {var t; para (t em e) return! 1; return! 0}, globalEval: function (e, t, n) {C (e, {nonce: t && t.nonce}, n)}, each: function (e, t) {var n, r = 0; if (d (e)) {for (n = e.length ; r <n; r ++) if (! 1 === t.call (e [r], r, e [r])) break} else para (r em e) if (! 1 === t.call (e [r], r, e [r])) break; return e}, makeArray: function (e, t) {var n = t || []; return null! = e && (d (Objeto (e) )? E.merge (n, "string" == tipo de e? [E]: e): u.call (n, e)), n}, inArray: function (e, t, n) {return null = = t? -1: i.call (t, e, n)}, mesclagem: function (e, t) {for (var n = + comprimento t, r = 0, i = comprimento e; r <n ; r ++) e [i ++] = t [r]; retorno e.length = i, e}, grep: function (e, t, n) {para (var r = [], i = 0, o = e. comprimento, a =! n; i <o; i ++)! t (e [i], i)! == a && r.push (e [i]); return r}, map: function (e, t, n) {var r, i, o = 0, a = []; se (d (e)) para (r = comprimento.de; o <r; o ++) null! = (i = t (e [o], o , n)) && a.push (i);caso contrário, para (o em e) nulo! = (i = t (e [o], o, n)) && a.push (i); return v (a)}, guid: 1, support: m}), " função "== typeof Symbol && (E.fn [Symbol.iterator] = t [Symbol.iterator]), E.each (" Boolean Number String Função Matriz Data Data RegExp Object Error Symbol ".split (" "), function (e , t) {n ["[objeto" + t + "]"] = t.toLowerCase ()}); var p = função (n) {var e, p, x, o, i, h, f, g, w, u, l, C, T, a, E, v, s, c, y, A = "chiar" + 1 * nova data, d = n.documento, N = 0, r = 0, m = ue (), b = ue (), S = ue (), k = ue (), D = função (e, t) {return e === t && (l =! 0), 0}, L = {} .hasOwnProperty, t = [], j = t.pop, q = t.push, O = t.push, P = t.slice, H = função (e, t) {for (var n = 0, r = e.length; n <r; n ++) se (e [n] === t) retornar n; retornar-1}, I = "marcado | selecionado | async | autofoco | autoplay | controles | adiar | desabilitado | desabilitado | oculto | ismap | loop | múltiplo | aberto | somente leitura | obrigatório | escopo ", R =" [\\ x20 \\ t \\ r \\ n \\ f] ",B = "(?: \\\\ [\\ da-fA-F] {1,6}" + R + "? | \\\\ [^ \\ r \\ n \\ f] | [\\ w-] | [^ \ 0 - \\ x7f]) + ", M =" \\ ["+ R +" * ("+ B +") (?: "+ R +" * ([* ^ $ |! ~ ]? =) "+ R +" * (?: '((?: \\\\. | [^ \\\\']) *) '| \ "((?: \\\\. | [^ \\\\\ "]) *) \" | ("+ B +")) |) "+ R +" * \\] ", W =" :( "+ B +") (?: \\ (((( '((?: \\\\. | [^ \\\\']) *) '| \ "((?: \\\\. | [^ \\\\\"]) *) \ " ) | ((?: \\\\. | [^ \\\\ () [\\]] | | + M + ") *) |. *) \\) |)", F = novo RegExp (R + "+", "g"), $ = new RegExp ("^" + R + "+ | ((?: ^ | [^ \\\\]) (?: \\\\.) *)" + R + "+ $", "g"), z = novo RegExp ("^" + R + "*," + R + "*"), _ = novo RegExp ("^" + R + "* ([> + ~] | "+ R +") "+ R +" * "), U = novo RegExp (R +" |> "), V = novo RegExp (W), X = novo RegExp (") "X = novo RegExp (" ^ "+ B +"$ "), Q = {ID: new RegExp (" ^ # ("+ B +") "), CLASS: new RegExp (" ^ \\. ("+ B +") "), TAG: new RegExp (" ^ ("+ B +" | [*]) "), ATTR: novo RegExp (" ^ "+ M), PSEUDO: novo RegExp (" ^ "+ W), FILHO: novo RegExp (" ^ :( somente | primeiro | last | enésimo | enésimo-último) - (filho | do tipo) (?: \\ ("+ R +" * (par | ímpar | | (([+ -] |) (\\ d *) n |) ") + R + "* (?: ([+ -] |)" + R + "* (\\ d +) |))" + R + "* \\) |)", "i"), bool: new RegExp (" ^ (?: "+ I +") $ "," i "), needsContext: new RegExp (" ^ "+ R +" * [> + ~] |: (par | ímpar | eq | gt | lt | enésimo | primeiro | last) (?: \\ ("+ R +" * ((?: - \\ d)? \\ d *) "+ R +" * \\) |) (? = [^ -] | $) " , "i")}, Y = / HTML $ / i, G = / ^ (?: input | select | textarea | button) $ / i, K = / ^ h \ d $ / i, J = / ^ [ ^ {] + \ {\ s * \ [nativo \ w /, Z = / ^ (?: # ([\ w -] +) | (\ w +) | \. ([\ w -] +)) $ /, ee = / [+ ~] /, te = novo RegExp ("\\\ [[da-fA-F] {1,6} "+ R +"? | \\\\ ([^ \\ r \\ n \\ f]) "," g "), ne = função (e, t) {var n = "0x" + e.slice (1) -65536; return t || (n <0? String.fromCharCode (n + 65536): String.fromCharCode (n >> 10 | 55296,1023 & n | 56320))}, re = / ([\ 0- \ x1f \ x7f] | ^ -? \ D) | ^ - $ | [^ \ 0- \ x1f \ x7f- \ uFFFF \ w- ] / g, ie = função (e, t) {retornar t? "\ 0" === e? "\ ufffd": e.slice (0, -1) + "\\" + e.charCodeAt (e .length-1) .toString (16) + "": "\\" + e}, oe = função () {C ()}, ae = xe (função (e) {return! 0 === e. desativado && "fieldset" === e.nodeName.toLowerCase ()}, {dir: "parentNode", próximo: "legend"}); tente {O.apply (t = P.call (d.childNodes), d. childNodes), t [d.childNodes.length] .nodeType} catch (e) {O = {apply: t.length? função (e, t) {q.apply (e, P.call (t))}: função (e, t) {var n = e.length, r = 0; while (e [n ++] = t [r ++]); e.length = n-1}}} function se (t, e, n,r) {var i, o, a, s, u, l, c, f = e&& e.ownerDocument, d = e? e.nodeType: 9; if (n = n || [], "string"! = typeof t ||! t || 1! == d && 9! == d && 11! == d) return n; if (! r && (C (e), e = e | e T, E)) {if (11! = = d && (u = Z.exec (t))) if (i = u [1]) {if (9 === d) {if (! (a = e.getElementById (i))) return n; if (a.id === i) retorna n.push (a), n} senão se (f && (a = f.getElementById (i)) && y (e, a) && a.id === i) return n. push (a), n} else {if (u [2]) return O.apply (n, e.getElementsByTagName (t)), n; if ((i = u [3]) && p.getElementsByClassName && e.getElementsByClassName) retornam O.apply (n, e.getElementsByClassName (i)), n} if (p.qsa &&! K [t + ""] && (! V ||! V.test (t)) && (1! == d | | "object"! == e.nodeName.toLowerCase ())) {if (c = t, f = e, 1 === d && (U.test (t) || _.test (t))) { (f = ee.teste (t) && ye (e.parentNode) || e) === e && p.scope || ((s = e.getAttribute ("id"))? s = s.replace (re, ie): e.setAttribute ("id", s = A)), o = (l = h (t)). length; while (o- -) l [o] = (s? "#" + s: ": escopo") + "" + ser (l [o]); c = l.join (",")} tente {return O.apply (n, f.querySelectorAll (c)), n} catch (e) {k (t,! 0)} finalmente {s === A && e.removeAttribute ("id")}}} return g (t.replace ( $, "$ 1"), e, n, r)} função ue () {var r = []; função de retorno e (t, n) {retorno r.push (t + "")> x.cacheLength && delete e [r .shift ()], e [t + ""] = n}} função le (e) {return e [A] =! 0, e} função ce (e) {var t = T.createElement ("fieldset") ; tente {return !! e (t)} catch (e) {return! 1} finalmente {t.parentNode && t.parentNode.removeChild (t), t = null}} função fe (e, t) {var n = e .split ("|"), r = n.length; while (r -) x.attrHandle [n [r]] = t} função de (e, t) {var n = t && e, r = n && 1 == = e.nodeType && 1 === t.nodeType && e.sourceIndex-t.sourceIndex; if (r) retorna r; if (n) while (n = n.nextSibling) if (n === t) return-1; return e? 1: -1} função pe (t) {retornar função (e) {retornar "entrada" === e.nodeName.toLowerCase () && e.type === t}} função he (n) {retornar função (e) { var t = e.nodeName.toLowerCase (); return ("input" === t || "button" === t) && e.type === n}} função ge (t) {função de retorno (e) {return "form" em e? e.parentNode &&! 1 === e.disabled? "label" em e? "label" em e.parentNode? e.parentNode.disabled === t: e.disabled === t: e.isDisabled === t || e.isDisabled! ==! t && ae (e) === t: e.disabled === t: "label" na função e && e.disabled === t}} ve (a) {return le (função (o) {return o = + o, le (função (e, t) {var n, r = a ([], comprimento e, o), i = comprimento; enquanto (i -) e [n = r [i]] && (e [n] =!(t [n] = e [n]))})})} função ye (e) {return e && "undefined"! = tipo de e.getElementsByTagName && e} para (e em p = se.support = {}, i = se.isXML = função (e) {var t = e.namespaceURI, n = (e.ownerDocument || e) .documentElement; return! Y.test (t || n && n.nodeName || "HTML")}, C = se.setDocument = function (e) {var t, n, r = e? e.ownerDocument || e: d; return r! = T && 9 === r.nodeType && r.documentElement && (a = (T = r). documentElement, E =! i (T), d! = T && (n = T.defaultView) && n.top! == n && (n.addEventListener? n.addEventListener ("descarregar", oe,! 1): n.attachEvent & n .attachEvent ("onunload", oe)), p.scope = ce (função (e) {retornar a.appendChild (e) .appendChild (T.criarElement ("div")), "indefinido"! = tipo de e. querySelectorAll &&! e.querySelectorAll (": scope fieldset div"). length}), p.atributos = ce (função (e) {retornar e.className = "i",! e.getAttribute ("className")}), p.getElementsByTagName = ce (função (e) {retornar e.appendChild (T.createComment ( "")) ,! e.getElementsByTagName ("*"). comprimento}), p.getElementsByClassName = J.test (T.getElementsByClassName), p.getById = ce (função (e) {retornar a.appendChild (e) .id = A,! T.getElementsByName ||! T.getElementsByName (A) .length}), p.getById? (x.filter.ID = function (e) {var t = e.replace (te, ne) ; return function (e) {return e.getAttribute ("id") === t}}, x.find.ID = function (e, t) {if ("undefined"! = tipo de t.getElementById && E) {var n = t.getElementById (e); return n? [n]: []}}) :( x.filter.ID = função (e) {var n = e.replace (te, ne); função de retorno (e ) {var t = "indefinido"! = tipo de e.getAttributeNode && e.getAttributeNode ("id"); retorne t && t.value === n}}, x.find.ID = function (e, t) {if ("undefined"! = tipo de t.getElementById && E) {var n, r, i, o = t.getElementById (e); if (o) {if ((n = o.getAttributeNode ("id")) && n.value === e) return [o]; i = t.getElementsByName (e), r = 0; while (o = i [r ++]) if ((n = o .getAttributeNode ("id")) && n.value === e) return [o]} return []}}), x.find.TAG = p.getElementsByTagName? function (e, t) {return "undefined"! = typeof t.getElementsByTagName? t.getElementsByTagName (e): p.qsa? t.querySelectorAll (e): void 0}: function (e, t) {var n, r = [], i = 0, o = t .getElementsByTagName (e); if ("*" === e) {while (n = o [i ++]) 1 === n.nodeType && r.push (n); retorno r} retorno o}, x.find. CLASS = p.getElementsByClassName && function (e, t) {if ("undefined"! = Tipo de t.getElementsByClassName && E) retorna t.getElementsByClassName (e)}, s = [], v = [], (p.qsa = J.test (T.querySelectorAll)) &&(ce (function (e) {var t; a.appendChild (e) .innerHTML = "<a id='"+A+"'> </a> <selecione id = '" + A + "- \ r \\ 'msallowcapture =' '> <opção selecionada =' '> </option> </select> ", e.querySelectorAll (" [msallowcapture ^ =' '] "). length && v.push (" [* ^ $] = " + R + "* (?: '' | \" \ ")"), e.querySelectorAll ("[selected]"). Length || v.push ("\\ [" + R + "* (?: valor | "+ I +") "), e.querySelectorAll (" [id ~ = "+ A +" -] "). Length || v.push (" ~ = "), (t = T.createElement (" input ") ) .setAttribute ("name", ""), e.appendChild (t), e.querySelectorAll ("[name = '']"). length || v.push ("\\ [" + R + "* nome "+ R +" * = "+ R +" * (?: '' | \ "\") "), e.querySelectorAll (": marcado "). length || v.push (": marcado "), e.querySelectorAll (" a # "+ A +" + * "). length || v.push (" . #. + [+ ~] "), e.querySelectorAll (" \\\ f "), v.push (" [\\ r \\ n \\ f] ")}), ce (função (e) {e.innerHTML = "<a href='' disabled='disabled'> </a> <select disabled = 'disabled'> <opção /> </select>"; var t = T.createElement ("input" ); t.setAttribute ("tipo", "oculto"), e.appendChild (t) .setAttribute ("nome", "D"), e.querySelectorAll ("[name = d]"). length && v.push ( "nome" + R + "* [* ^ $ |! ~]? ="), 2! == e.querySelectorAll (": enabled"). length && v.push (": enabled", ": disabled"), a .appendChild (e) .disabled =! 0,2! == e.querySelectorAll (":desabilitado "). length && v.push (": enabled ",": disabled "), e.querySelectorAll (" * ,: x "), v.push (",. *: ")})), (p.matchesSelector = J.test (c = a.matches || a.webkitMatchesSelector || a.mozMatchesSelector || a.oMatchesSelector || a.msMatchesSelector)) && ce (função (e) {p.disconnectedMatch = c.call (e, " * "), c.call (e," [s! = '']: x "), s.push ("! = ", W)}), v = comprimento de v. && new RegExp (v.join (" | ")), s = s.length && new RegExp (s.join (" | ")), t = J.test (a.compareDocumentPosition), y = t || J.test (a.contains)? function (e, t) {var n = 9 === e.nodeType? e.documentElement: e, r = t && t.parentNode; return e === r ||! (! r || 1! == r.nodeType ||! (n.contains? n.contains (r): e.compareDocumentPosition && 16 & e.compareDocumentPosition (r)))}: function (e, t) {if (t) enquanto (t = t.parentNode) if (t === e ) return! 0;return! 1}, D = função t (e, t) {if (e === t) retorna l =! 0,0; var n =! e.compareDocumentPosition-! t.compareDocumentPosition; return n || ( 1 & (n = (e.ownerDocument || e) == (t.ownerDocument || t)? E.compareDocumentPosition (t): 1) ||! P.sortDetached && t.compareDocumentPosition (e) === n? E = = T || e.ownerDocument == d && y (d, e)? - 1: t == T || t.ownerDocument == d && y (d, t)? 1: u? H (u, e) -H ( u, t): 0: 4 & n? -1: 1)}: function (e, t) {if (e === t) retorna l =! 0,0; var n, r = 0, i = e. parentNode, o = t.parentNode, a = [e], s = [t]; if (! i ||! o) return e == T? -1: t == T? 1: i? -1: o? 1: u? H (u, e) -H (u, t): 0; se (i === o) retorna de (e, t); n = e; while (n = n.parentNode) a.unshift (n); n = t; while (n = n.parentNode) s.unshift (n); while (a [r] === s [r]) r ++; return r? de (a [r ], s [r]): a [r] == d? -1: s [r] == d? 1: 0}), T}, se.matches = function (e, t) {return se ( e, nulo, nulo, t)}, se.matchesSelector = function (e, t) {if (C (e), p.matchesSelector && E &&! k [t + ""] && (! s ||! s.test (t)) && (! v ||! v.test (t))) tente {var n = c.call (e, t); if (n || p. connectedMatch || e.document && 11! == e.document.nodeType) return n} catch (e) {k (t,! 0)} return 0 <se (t, T, null, [e]). length}, se.contains = function (e, t) {return (e.ownerDocument || e)! = Termos e condições (e), y (e, t)}, se.attr = function (e, t) {(e.ownerDocument || e)! = T && C (e); var n = x.attrHandle [t.toLowerCase ()], r = n && L.call (x.attrHandle, t.toLowerCase ())? n (e, t,! E ): void 0; return void 0! == r? r: p.atributos ||! E? e.getAttribute (t) :( r = e.getAttributeNode (t)) && r.especificado? r.value: null} , se.escape = função (e) {retornar (e + ""). substituir (re, ie)}, se.error = função (e) {lançar novo erro ("Erro de sintaxe, expressão não reconhecida:" + e)} , se.uniqueSort = função (e) {var t, n = [], r = 0, i = 0; if (l =! p.detectDuplicates, u =! p.sortStable && e.slice (0), e.sort (D)l) {while (t = e [i ++]) t === e [i] && (r = n.push (i)); while (r -) e.splice (n [r], 1)} retornar u = nulo, e}, o = se.getText = função (e) {var t, n = "", r = 0, i = e.nodeType; if (i) {if (1 === i | | 9 === i || 11 === i) {if ("string" == tipo de e.textContent) retorna e.textContent; for (e = e.firstChild; e; e = e.nextSibling) n + = o (e)} else if (3 === i || 4 === i) retorna e.nodeValue} else while (t = e [r ++]) n + = o (t); return n}, (x = se.selectors = {cacheLength: 50, createPseudo: le, corresponde: Q, attrHandle: {}, encontre: {}, relativo: {">": {dir: "parentNode", primeiro:! 0}, "": {dir: "parentNode"}, "+": {dir: "previousSibling", primeiro:! 0}, "~": {dir: "previousSibling"}}, preFilter: {ATTR: function (e) {return e [1] = e [1]. Substitua (te, ne), e [3] = (e [3] || e [4] || e [5] || ""). Replace (te, ne) , "~ =" === e [2] && (e [3] = "" + e [3] + ""), e.fatia (0,4)}, CRIANÇA: função (e) {retorno e [1] = e [1] .toLowerCase (), "nésimo" === e [1]. fatia (0,3)? (e [3] || se.error (e [0]), e [4] = + (e [4]? E [5] + (e [6] || 1): 2 * ("par" == = e [3] || "ímpar" === e [3])), e [5] = + (e [7] + e [8] || "ímpar" === e [3])) : e [3] && se.error (e [0]), e}, PSEUDO: função (e) {var t, n =! e [6] && e [2]; return Q.CHILD.test (e [0 ])? null: (e [3]? e [2] = e [4] || e [5] || "": n && V.teste (n) && (t = h (n,! 0)) && (t = n.índice x (")", n.length-t) -n.length) && (e [0] = e [0] .slice (0, t), e [2] = n.slice ( 0, t)), e.slice (0,3))}}, filtro: {TAG: function (e) {var t = e.replace (te, ne) .toLowerCase (); return "*" == = e? function () {return! 0}: function (e) {return e.nodeName && e.nodeName.toLowerCase () === t}}, CLASSE: function (e) {var t = m [e + ""] ; return t || (t = new RegExp ("(^ |" + R + ")" + e + "(" + R + "| $)")) && m (e, função (e) {return t.test ("string" == tipo de e.className && e.className || "indefinido"! = tipo de e.getAttribute && e.getAttribute ("classe") || "") })}, ATTR: function (n, r, i) {função de retorno (e) {var t = se.attr (e, n); return null == t? "! =" === r:! R || (t + = "", "=" === r? t === i: "! =" === r? t! == i: "^ =" === r? i && 0 === t.indexOf (i): "* =" === r? i && - 1 <t.indexOf (i): "$ =" === r? i && t.slice (-i.length) === i: "~ =" === r? -1 <("" + t.replace (F, "") + "") .indexOf (i): "| =" === r && (t === i | | t.slice (0, i.length + 1) === i + "-"))}}, CHILD: function (h, e, t, g, v) {var y = "enésimo"! == h .slice (0,3), m = "last"! == h.slice (-4), b = "do tipo" === e; return 1 === g &&0 === v? Function (e) {return !! e.parentNode}: function (e, t, n) {var r, i, o, a, s, u, l = y! == m? " nextSibling ":" previousSibling ", c = e.parentNode, f = b && e.nodeName.toLowerCase (), d =! n &&! b, p =! 1; if (c) {if (y) {while (l) { a = e; while (a = a [l]) if (b? a.nodeName.toLowerCase () === f: 1 === a.nodeType) return! 1; u = l = "only" == = h &&! u && "nextSibling"} retorna! 0} if (u = [m? c.firstChild: c.lastChild], m && d) {p = (s = (r = (i = (o = (a = c)) [A] || (a [A] = {})) [a.uniqueID] || (o [a.uniqueID] = {})) [h] || []) [0] === N&& r [ 1]) && r [2], a = s && c.childNodes [s]; while (a = ++ s && a && a [l] || (p = s = 0) || u.pop ()) if (1 === a.nodeType && ++ p && a === e) {i [h] = [N, s, p]; break}} else if (d && (p = s = (r = (i = (o = (a = e ) [A] || (a [A] = {})) [a.uniqueID] || (o [a.uniqueID] = {})) [h] || []) [0] === N&&r [1]) ,! 1 === p) enquanto (a = ++ s && a &&a [l] || (p = s = 0) || u.pop ()) if ((b? a.nodeName.toLowerCase () === f: 1 === a.nodeType) && ++ p && (d && ((i = (o = a [A] = {})) [a.uniqueID] || (o [a.uniqueID] = {})) [h] = [N , p]), a === e)) break; return (p- = v) === g || p% g == 0 && 0 <= p / g}}}, PSEUDO: function (e, o) {var t, a = x.pseudos [e] || x.setFilters [e.toLowerCase ()] || se.error ("pseudo não suportado:" + e); retorna um [A]? a (o): 1 <comprimento.a? (T = [e, e, "", o], x.setFilters.hasOwnProperty (e.toLowerCase ())? Le (function (e, t) {var n, r = a (e , o), i = r.length; while (i -) e [n = H (e, r [i])] =! (t [n] = r [i])}): function (e) {retorna a (e, 0, t)}): a}}, pseudos: {not: le (função (e) {var r = [], i = [], s = f (e.replace ($, "$ 1")); return s [A]? Le (function (e, t, n, r) {vari, o = s (e, null, r, []), a = e.length; while ( a -) (i = o [a]) && (e [a] =! (t [a] = i))}): function (e, t, n) {retorno r [0] = e, s (r, nulo, n, i), r [0] = nulo,! i.pop ()}}), possui:le (function (t) {return function (e) {return 0 <se (t, e) .length}}), contém: le (function (t) {return t = t.replace (te, ne), function (e) {return-1 <(e.textContent || o (e)). indexOf (t)}}), lang: le (função (n) {return X.test (n || "") || se.error ("idioma não suportado:" + n), n = n. substituir (te, ne) .toLowerCase (), função (e) {var t; do {if (t = E? e.lang: e. getAttribute ("xml: lang") || e.getAttribute ("lang")) return (t = t.toLowerCase ()) === n || 0 === t.indexOf (n + "-")} enquanto ((e = e.parentNode) && 1 === e.nodeType); return! 1}}), target: function (e) {var t = n.location && n.location.hash; return t && t.slice (1) = == e.id}, raiz: função (e) {retorno e === a}, foco: função (e) {retorno e === T.activeElement && (! T.hasFocus || T.hasFocus ()) && !! (e.type || e.href || ~ e.tabIndex)}, ativado: ge (! 1), desativado: ge (! 0), verificado: função (e) {var t = e.nodeName .toLowerCase (); return "input" === t && e.checked || "opção" === t && e.selected}, selecionado: function (e) {return e.parentNode && e.parentNode.selectedIndex ,! 0 === e.selecionado}, vazio: function (e) {for (e = e.firstChild; e; e = e.nextSibling) if (e.nodeType <6) return! 1; return! 0}, pai : function (e) {return! x.pseudos.empty (e)}, cabeçalho: function (e) {retorne K.test (e.nodeName)}, entrada: function (e) {retorne G.test (e. nodeName)}, button: function (e) {var t = e.nodeName.toLowerCase (); return "input" === t && "button" === e.type || "button" === t}, text: function (e) {var t; return "input" === e.nodeName.toLowerCase () && "text" === e.type && (null == (t = e.getAttribute ("type"))) || "texto" === t.toLowerCase ())}, primeiro: ve (função () {retorno [0]}), último: ve (função (e, t) {retorno [t-1]}) , eq: ve (função (e,t, n) {return [n <0? n + t: n]}), even: ve (function (e, t) {for (var n = 0; n <t; n + = 2) e.push ( n); return e}), ímpar: ve (função (e, t) {for (var n = 1; n <t; n + = 2) e.push (n); return e}), lt: ve ( função (e, t, n) {para (var r = n <0? n + t: t <n? t: n; 0 <= - r;) e.push (r); return e}), gt: ve (função (e, t, n) {para (var r = n <0? n + t: n; ++ r <t;) e.push (r); retorno e})}}). pseudos.nth = x.pseudos.eq, {radio:! 0, caixa de seleção:! 0, arquivo:! 0, senha:! 0, imagem:! 0}) x.pseudos [e] = pe (e); para (e em {enviar:! 0, redefinir:! 0}) x.pseudos [e] = ele (e); função me () {} função ser (e) {para (var t = 0, n = e. comprimento, r = ""; t <n; t ++) r + = e [t] .valor; retorno r} função xe (s, e, t) {var u = e.dir, l = e.next, c = l || u, f = t && "parentNode" === c, d = r ++; retorna e.first? função (e, t, n) {while (e = e [u]) if (1 === e .nodeType || f) return s (e, t, n); return! 1}: function (e, t, n) {var r, i, o, a = [N, d]; if (n) { while (e = e [u]) if ((1 === e.nodeType || f) && s (e, t, n)) retornam!0} else while (e = e [u]) if (1 === e.nodeType || f) if (i = (o = e [A] || (e [A] = {})) [e .uniqueID] || (o [e.uniqueID] = {}), l && l === e.nodeName.toLowerCase ()) e = e [u] || e; else {if (((r = i [c] ) && r [0] === N && r [1] === d) retorna a [2] = r [2]; if ((i [c] = a) [2] = s (e, t, n) ) return! 0} return! 1}} função we (i) {return 1 <comprimento i? função (e, t, n) {var r = comprimento i; enquanto (r -) if (! i [ r] (e, t, n)) return! 1; return! 0}: i [0]} função Ce (e, t, n, r, i) {para (var o, a = [], s = 0, u = e.length, l = nulo! = T; s <u; s ++) (o = e [s]) && (n &&! N (o, r, i) || (a.push (o) , l && t.push (s));; return a} function Te (p, h, g, v, y, e) {return v &&! v [A] && (v = Te (v)), y &&! y [ A] && (y = Te (y, e)), le (função (e, t, n, r) {var i, o, a, s = [], u = [], l = comprimento t, c = e || função (e, t, n) {for (var r = 0, i = comprimento t; r <i; r ++) se (e, t [r], n); return n} (h || "*", n.nodeType? [n]: n, []), f =! p ||! e && h? c: Ce (c, s, p, n, r), d = g? y | | (e? p:l || v)? []: t: f; se (g && g (f, d, n, r), v) {i = Ce (d, u), v (i, [], n, r), o = i.length; while (o -) (a = i [o]) && (d [u [o]] =! (f [u [o]] = a))} if (e) {if (y || p) {se (y) {i = [], o = d.length; while (o -) (a = d [o]) && i.push (f [o] = a); y (nulo, d = [], i, r)} o = d.length; while (o -) (a = d [o]) && - 1 <(i = y? H (e, a): s [o]) && (e [i] =! (t [i] = a))}} else d = Ce (d === t? d.splice (l, d.length): d), y? y (nulo, t, d, r): O.aplicar (t, d)})} função Ee (e) {para (var i, t, n, r = comprimento e, o = x.relativo [e [0] .type], a = o || x.relativo [""], s = o? 1: 0, u = xe (função (e) {retorno e === i}, a,! 0) , l = xe (função (e) {return-1 <H (i, e)}, a,! 0), c = [função (e, t, n) {var r =! o && (n || t ! == w) || ((i = t) .nodeType? u (e, t, n): l (e, t, n)); retorno i = nulo, r}]; s <r; s ++) if (t = x.relativo [e [s] .type]) c = [xe (we (c), t)]; else {if ((t = x.filter [e [s] .type] .apply (null, e [s] .matches)) [A]) {for (n = ++ s; n <r; n ++) if (x.relative [e [n] .type]) break; return Te (1 <s && we (c), 1 <s && be (e.slice (0, s-1) .concat ({valor: "" === e [s-2] .type? "*": ""}). ($, "$ 1"), t, s <n && Ee (e.slice (s, n)), n <r && Ee (e = e.slice (n)), n <r && be (e))} c.push ( t)} retornamos (c)} retornamos me.prototype = x.filters = x.pseudos, x.setFilters = novo eu, h = se.tokenize = function (e, t) {var n, r, i, o , a, s, u, l = b [e + ""]; se (l) retornar t? 0: l.slice (0); a = e, s = [], u = x.preFilter; while (a ) {for (o em n &&! (r = z.exec (a)) || (r && (a = a.slice (r [0] .length) || a), s.push (i = []) ), n =! 1, (r = _. exec (a)) && (n = r.shift (), i.push ({valor: n, digite: r [0] .replace ($, "") }), a = a.lice (n.length)), x.filter)! (r = Q [o] .exec (a)) || u [o] &&! (r = u [o] (r )) || (n = r.shift (), i.push ({valor: n, tipo: o, corresponde a: r}), a = a.slice (n.length)); if (! n) break } retorna t? a.length: a? se.error (e): b (e, s) .slice (0)}, f = se.compile = function (e,t) {var n, v, y, m, b, r, i = [], o = [], a = S [e + ""]; se (! a) {t || (t = h (e )), n = t.length; while (n -) (a = Ee (t [n])) [A]? i.push (a): o.push (a); (a = S (e , (v = o, m = 0 <(y = i). comprimento, b = 0 <v.length, r = função (e, t, n, r, i) {var o, a, s, u = 0, l = "0", c = e && [], f = [], d = w, p = e || b && x.find.TAG ("*", i), h = N + = nulo == d? 1: Math.random () || .1, g = p.length; para (i && (w = t == T || t || i); l! == g && null! = (O = p [l] ); l ++) {if (b && o) {a = 0, t || o.ownerDocument == T || (C (o), n =! E); while (s = v [a ++]) if (s ( o, t || T, n)) {r.push (o); break} i && (N = h)} m && ((o =! s && o) && u -, e && c.push (o))} if (u + = l, m && l! == u) {a = 0; while (s = y [a ++]) s (c, f, t, n); if (e) {if (0 <u) while (l-- ) c [l] || f [l] || (f [l] = j.call (r)); f = Ce (f)} O.aplicar (r, f), i &&! e && 0 <f.length && 1 <u + y.length && se.uniqueSort (r)} retorna i && (N = h, w = d), c}, m? le (r): r))).seletor = e} retornar a}, g = se.select = function (e, t, n, r) {var i, o, a, s, u, l = "function" == tipo de e && e, c =! r && h (e = l.seletor || e); if (n = n || [], 1 === c.length) {if (2 <(o = c [0] = c [0] .slice (0 )). length && "ID" === (a = o [0]). digite && 9 === t.nodeType && E && x.relative [o [1] .type]) {if (! (t = (x.find.ID (a.matches [0] .replace (te, ne), t) || []) [0])) return n; l && (t = t.parentNode), e = e.slice (o.shift () .value.length)} i = Q.needsContext.test (e)? 0: o.length; while (i -) {if (a = o [i], x.relative [s = a.type]) break; if ((u = x.find [s]) && (r = u (a.matches [0]. substitua (te, ne), ee.test (o [0] .type) && ye (t.parentNode ) || t))) {if (o.splice (i, 1),! (e = r.length && be (o))) return O.apply (n, r), n; break}}} return (l || f (e, c)) (r, t,! E, n,! t || ee.test (e) && ye (t.parentNode) || t), n}, p.sortStable = A.split (""). sort (D). junin ("") === A, p.detectDuplicates = !! l, C (), p.sortDetached = ce (função (e) {return 1 & e.compareDocumentPosition (T.createElement ("fieldset"))})), ce (função (e) {return e.innerHTML = "<a href='#'> </a>", "#" === e.firstChild.getAttribute ("href")}) || fe ("tipo | href | altura | largura", função (e , t, n) {if (! n) retorna e.getAttribute (t, "type" === t.toLowerCase ()? 1: 2)}), p.attributes && ce (function (e) {return e.innerHTML = "<input />", e.firstChild.setAttribute ("value", ""), "" === e.firstChild.getAttribute ("value")}) || fe ("value", função (e , t, n) {if (! n && "input" === e.nodeName.toLowerCase ()) retorna e.defaultValue}), ce (função (e) {return null == e.getAttribute ("disabled") }) || fe (I, função (e, t, n) {var r; se (! n) retornar! 0 === e [t]? t.toLowerCase () :( r = e.getAttributeNode (t)) && r.specified? r.value: null}), se} (g); E.find = p, E.expr = p.selectors, E.expr [ ":"] = E.expr.pseudos, E.uniqueSort = E.unique = p.uniqueSort, E.text = p.getText, E.isXMLDoc = p.isXML, E.contains = p.contains, E.escapeSelector = p.escape; var h = função (e, t, n) {var r = [], i = nulo 0! == n; while ((e = e [t]) && 9! == e.nodeType) if (1 === e.nodeType) {if (i && E (e) .is (n)) quebra; r.push (e)} retorna r}, A = função (e, t) {for (var n = []; e; e = e.nextSibling) 1 === e.nodeType && e! == t && n.push (e); retorno n}, N = E.expr.match.needsContext; função S (e, t) { retornar e.nodeName && e.nodeName.toLowerCase () === t.toLowerCase ()} var k = / ^ <([az] [^ \ / \ 0>: \ x20 \ t \ r \ n \ f] *) [\ x20 \ t \ r \ n \ f] * \ /?> (?: <\ / \ 1> |) $ / i; função D (e, n, r) {retorno b (n)? E. grep (e, função (e, t) {return !! n.call (e, t, e)! == r}): n.nodeType? E.grep (e, função (e) {return e == = n! == r}):"string"! = tipo de n? E.grep (e, função (e) {return-1 <chamada.c (n, e)! == r}): E.filter (n, e, r)} E .filter = função (e, t, n) {var r = t [0]; retornar n && (e = ": not (" + e + ")"), 1 === comprimento de t && 1 === r.nodeType ? E.find.matchesSelector (r, e)? [R]: []: E.find.matches (e, E.grep (t, função (e) {return 1 === e.nodeType}))} , E.fn.extend ({find: function (e) {var t, n, r = this.length, i = this; if ("string"! = Typeof e) retorna this.pushStack (E (e). filter (function () {for (t = 0; t <r; t ++) if (E.contains (i [t], this)) return! 0})); for (n = this.pushStack ([]) , t = 0; t <r; t ++) E. encontrar (e, i [t], n); retornar 1 <r? E.uniqueSort (n): n}, filter: function (e) {retornar isso. pushStack (D (isto, e || [] ,! 1))}, não: function (e) {retorna this.pushStack (D (isto, e || [] ,! 0))}, é: function ( e) {return !! D (this, "string" == tipo de e && N.test (e)? E (e): e || [] ,! 1) .length}}); var L, j = / ^ (?: \ s * (<[\ w \ W] +>) [^>] * | # ([\ w -] +)) $ /; (E.fn.init = function (e, t, n) {var r, i; if (! e) retorna isso; se (n = n || L, "string" == tipo de e) {if (! (r = "<" === e [0] && ">" === e [e.length-1] && 3 < = e.length? [nulo, e, nulo]: j.exec (e)) ||! r [1] && t) return! t || t.jquery? (t || n) .find (e): this.constructor (t) .find (e); if (r [1]) {if (t = t instância de E? t [0]: t, E.merge (this, E.parseHTML (r [1], t && t.nodeType? t.ownerDocument || t: w,! 0)), k.test (r [1]) && E.isPlainObject (t)) para (r em t) b (este [r])? this [ r] (t [r]): this.attr (r, t [r]); retorna este} retorno (i = w.getElementById (r [2])) && (this [0] = i, this.length = 1), this} return e.nodeType? (This [0] = e, this.length = 1, this): b (e)? Void 0! == n.ready? N.ready (e): e (E): E.makeArray (e, isto)}). Prototype = E.fn, L = E (w); var q = / ^ (?: pais | prev (?: Até | Todos)) /, O = {filhos:! 0, conteúdo:! 0, próximo:! 0, prev:! 0}; função P (e,t) {while ((e = e [t]) && 1! == e.nodeType); return e} E.fn.extend ({has: function (e) {var t = E (e, this), n = t.length; retorna this.filter (function () {for (var e = 0; e <n; e ++) if (E.contains (this, t [e])) return! 0})}, o mais próximo: função (e, t) {var n, r = 0, i = this.length, o = [], a = "string"! = tipo de e && E (e); if (! N.test (e)) for ( ; r <i; r ++) para (n = this [r]; n && n! == t; n = n.parentNode) if (n.nodeType <11 && (a? -1 <a.index (n): 1 = == n.nodeType && E.find.matchesSelector (n, e))) {o.push (n); break} retorna this.pushStack (1 <o.length? E.uniqueSort (o): o)}, índice: função (e) {retornar e? "string" == tipo de e? i.call (E (e), este [0]): i.call (this, e.jquery? e [0]: e): this [0] && this [0] .parentNode? This.first (). PrevAll (). Length: -1}, add: function (e, t) {retorna this.pushStack (E.uniqueSort (E.merge (this. get (), E (e, t)))}}, addBack: function (e) {retorna this.add (null == e? this.prevObject: this.prevObject.filter (e))}}), E.each ({parent: function (e) {var t = e.parentNode; return t && 11! == t.nodeType? t: null}, os pais: function (e) {return h (e, "parentNode")}, parentsUntil: function (e, t, n) {return h (e, "parentNode", n)}, próximo: function (e) {return P ( e, "nextSibling")}, prev: função (e) {retornar P (e, "previousSibling")}, nextAll: função (e) {retornar h (e, "nextSibling")}, prevAll: function (e) {return h (e, "previousSibling")}, nextUntil: function (e, t, n) {return h (e, "nextSibling", n)}, prevUntil: function (e, t, n) {return h ( e, "Irmão anterior", n)}, irmãos: função (e) {retorno A ((e.parentNode || {}). firstChild, e)}, filhos: função (e) {retorno A (e.firstChild) }, conteúdo: função (e) {retornar nulo! = e.contentDocument && r (e.contentDocument)? e.contentDocument: (S (e, "modelo") && (e = e.content || e), E.merge ([], e.childNodes))}}, função (r, i) {E.fn [r] = função (e, t) {var n = E.map (this, i, e); retorne "Até"! == r.slice (-5) && (t = e), t && "string" == tipo de t && (n = E.filter (t, n)), 1 <this.length && (O [r] || E.uniqueSort (n), q.test (r) && n.reverse ()), this.pushStack (n)}}); var H = / [^ \ x20 \ t \ r \ n \ f] + / g; função I (e) {retorna e} função R (e) {lança e} função B (e, t, n, r) {vari; tente {e && b (i = e.promise)? i.call (e) .done (t) .fail (n): e &&b (i = e.then)? i.call (e, t, n): t. apply (void 0, [e] .slice (r))} catch (e) {n.apply (void 0, [e])}} E.Callbacks = function (r) {var e, n; r = " string "== tipo de r? (e = r, n = {}, E.each (e.match (H) || [], função (e, t) {n [t] =! 0}), n ): E. extender ({}, r); var i, t, o, a, s = [], u = [], l = -1, c = function () {for (a = a || r .once, o = i =! 0; u.length; l = -1) {t = u.shift (); while (++ l <s.length)! 1 === s [l] .apply ( t [0], t [1]) e& r.stopOnFalse && (l = s.length, t =! 1)} r.memória || (t =! 1), i =! 1, a && (s = t? []: "")}, f = { add: function () {return s && (t &&! i && (l = s.length-1, u.push (t)), função n (e) {E.each (e, função (e, t) {b ( t)? r.unique && f.has (t) || s.push (t): t && t.length && "string"! == T (t) && n (t)})} (argumentos), t &&! i && c ()) , this}, remove: function () {retorna E.each (argumentos, função (e, t) {var n; while (-1 <(n = E.inArray (t, s, n))) s.splice (n, 1), n ​​<= l && l -}), this}, possui: function (e) {return e? -1 <E.inArray (e, s): 0 <comprimento s.}, vazio: function () {return s && (s = []), this}, desativar: function () {return a = u = [], s = t = "", this}, disabled: function () {return! s}, lock: function () {retorna a = u = [], t || i || (s = t = ""), isto}, locked: function () {return !! a}, fireWith: function (e, t) {retorna a || (t = [e, (t = t || []).fatia? t.slice (): t], u.push (t), i || c ()), isto}, fire: function () {return f.fireWith (this, argumentos), this}, acionado: function () {return !! o}}; return f}, E.extend ({Adiado: function (e) {var o = [["notify", "progress", E.Callbacks ("memory"), E .Callbacks ("memory"), 2], ["resolver", "done", E.Callbacks ("uma vez memória"), E.Callbacks ("uma vez memória"), 0, "resolved"], ["rejeitar "," falha ", E.Callbacks (" uma vez memória "), E.Callbacks (" uma vez memória "), 1," rejeitado "]], i =" pendente ", a = {state: function () {return i}, sempre: function () {retorna s.done (argumentos) .fail (argumentos), isso}, "captura": function (e) {retorna a.then (null, e)}, pipe: function () {vari = argumentos; retornar E.Deferido (função (r) {E.each (o, função (e, t) {varn = b (i [t [4]]) && i [t [4]];s [t [1]] (function () {var e = n && n.apply (this, argumentos); e && b (e.promise)? e.promise (). progress (r.notify) .done (r.resolve) .fail (r.reject): r [t [0] + "With"] (isto, n? [e]: argumentos)})}), i = nulo}). promessa ()}, então: function ( t, n, r) {var u = 0; função l (i, o, a, s) {função de retorno () {var n = isto, r = argumentos, e = função () {var e, t; se (! (i <u)) {if ((e = a.apply (n, r)) === o.promise ()) lança novo TypeError ("Auto-resolução escalável"); t = e && ("objeto "== typeof e ||" function "== typeof e) &&.then, b (t)? s? t.call (e, l (u, o, I, s), l (u, o, R , s)) :( u ++, t.call (e, l (u, o, I, s), l (u, o, R, s), l (u, o, I, o.notifyWith))) : (a! == I&& (n = void 0, r = [e]), (s || o.resolveWith) (n, r))}}, t = s? e: function () {try {e ()} catch (e) {E.Deferred.exceptionHook && E.Deferred.exceptionHook (e, t.stackTrace), u <= i + 1 && (a! == R&& (n = void 0, r = [e]), o.rejectWith (n, r))}}; i? t () :( E.Deferred.getStackHook && (t.stackTrace = E.Deferred.getStackHook ()), g.setTimeout (t))}} retornar E.Deferred ( função (e) {o [0] [3] .add (l (0, e, b (r)? r: I, notificarWith)), o [1] [3] .add (l (0, e, b (t)? t: I)), o [2] [3] .add (l (0, e, b (n)? n: R))}). promessa ()}, promessa: função (e) {return null! = e? E. extender (e, a): a}}, s = {}; retornar E.each (o, função (e, t) {var n = t [2], r = t [5]; a [t [1]] = n.add, r && n.add (função () {i = r}, o [3-e] [2] .disable, o [3-e] [3] .disable, o [0] [2] .lock, o [0] [3] .lock), n.adicionar (t [3] .fire), s [t [0]] = function () {return s [t [0] + "With"] (this === s? void 0: this, argumentos), this}, s [t [0] + "With"] = n.fireWith}), um .promise (s), e && e.call (s, s), s}, quando: function (e) {var n = argument.length, t = n, r = Array (t), i = s.call (argumentos ), o = E.Deferido (), a = função (t) {função de retorno (e) {r [t] = isto, i [t] = 1 <argumentos.comprimento? s.call (argumentos): e, --n || o.resolveWith (r, i)}}; if (n <= 1 && (B (e, o.done (a (t)). resolve, o.reject,! n), "pendente" === o.state ( ) || b (i [t] && i [t] .then))) return o.then (); while (t -) B (i [t], a (t), o.reject); return o .promise ()}}); var M = / ^ (Eval | Interno | Intervalo | Referência | Sintaxe | Tipo | URI) Erro $ /; E.Deferred.exceptionHook = function (e, t) {g.console && g.console .warn && e && M.test (e.name) && g.console.warn ("jQuery.Exceção adiada:" + e.message, e.stack, t)}, E.readyException = function (e) {g.setTimeout (function ( ) {throw e})}; var W = E.Deferred (); função F () {w.removeEventListener ("DOMContentLoaded", F), g.removeEventListener ("load", F), E.ready ()} E.fn.ready = function (e) {return W.then (e) ["catch"] (function (e) {E.readyException (e)}), isto} E.extend ({isReady:! 1 , readyWait: 1, ready: function (e) {(! 0 === e? - E.readyWait: E.isReady) || (E.isReady =! 0)! == e && 0 <- E.readyWait || W.resolveWith (w, [E])}}), E.ready.then = W.then, "complete" === w.readyState || "loading"! == w.readyState &&! w.documentElement.doScroll? g.setTimeout (E.ready) :( w.addEventListener ("DOMContentLoaded", F), g.addEventListener ("load", F)) ; var $ = função (e, t, n, r, i, o, a) {var s = 0, u = comprimento e, l = nulo == n; if ("objeto" === T (n )) para (s em i =! 0, n) $ (e, t, s, n [s] ,! 0, o, a); caso contrário, se (void 0! == r && (i =! 0, b (r) || (a =! 0), l && (a? (t.call (e, r), t = nulo) :( l = t, t = função (e, t, n) {retorno l. chamada (E (e), n)})), t)) para (; s <u; s ++) t (e [s], n, a? r: r.call (e [s], s, t (e [s], n))); return i? e: l? t.call (e): u? t (e [0], n): o}, z = / ^ - ms - /, _ = / - ([az]) / g; função U (e, t) {retornar t.toUpperCase ()} função V (e) {retornar e.replace (z, "ms -"). replace (_, U )} var X = função (e) {retornar 1 === e.nodeType || 9 === e.nodeType ||! + e.nodeType};função Q () {this.expando = E.expando + Q.uid ++} Q.uid = 1, Q.prototype = {cache: função (e) {var t = e [this.expando]; return t || ( t = {}, X (e) && (e.nodeType? e [this.expando] = t: Object.defineProperty (e, this.expando, {valor: t, configurável:! 0}))), t} , set: function (e, t, n) {var r, i = this.cache (e); if ("string" == tipo de t) i [V (t)] = n; caso contrário, para (r em t ) i [V (r)] = t [r]; return i}, get: function (e, t) {return void 0 === t? this.cache (e): e [this.expando] && e [ this.expando] [V (t)]}, acesso: function (e, t, n) {return void 0 === t || t && "string" == tipo de t && void 0 === n? this.get ( e, t) :( this.set (e, t, n), nulo 0! == n? n: t)}, remove: function (e, t) {var n, r = e [this.expando] ; if (void 0! == r) {if (void 0! == t) {n = (t = Array.isArray (t)? t.map (V) :( t = V (t)) em r ? [t]: t.match (H) || []). length; while (n -) exclui r [t [n]]} (vazio 0 === t || E.isEmptyObject (r)) && (e.nodeType? e [this.expando] = 0:delete e [this.expando])}}, hasData: function (e) {var t = e [this.expando]; return void 0! == t && E.isEmptyObject (t)}}; var Y = new Q , G = novo Q, K = / ^ (?: \ {[\ W \ W] * \} | \ [[\ w \ W] * \]) $ /, J = / [AZ] / g; função Z (e, t, n) {var r, i; if (void 0 === n && 1 === e.nodeType) if (r = "data -" + t.replace (J, "- $ &") .toLowerCase (), "string" == typeof (n = e.getAttribute (r))) {try {n = "true" === (i = n) || "false"! == i && ("null "=== i? null: i === + i +" "? + i: K.test (i)? JSON.parse (i): i)} captura (e) {} G.set (e, t , n)} else n = void 0; return n} E.extend ({hasData: function (e) {return G.hasData (e) || Y.hasData (e)}}, data: function (e, t, n) {retornar G.access (e, t, n)}, removeData: função (e, t) {G.remover (e, t)}, _ dados: função (e, t, n) {retornar Y.access (e, t, n)}, _ removeData: function (e, t) {Y.remove (e, t)}}), E.fn.extend ({data: function (n, e) {var t, r , i, o = this [0], a = o && o.atributos; if (void 0 === n) {if (this.length && (i = G.get (o), 1 === o.nodeType &&! Y.get (o, "hasDataAttrs"))) {t = a.length; while (t -) a [t] && 0 === (r = a [t] .name) .indexOf ("dados -") && (r = V (r.slice (5)), Z (o, r, i [r])); Y.set (o, "hasDataAttrs",! 0)} retorna i} retorna "} objeto" == tipo de n? This.each (function () {G.set (this, n)}): $ (this, function (e) {var t; if (o && void 0 === e) return void 0! == (t = G.get (o, n))? t: void 0! == (t = Z (o, n))? t: void 0; this.each (function () {G.set (this, n, e)})}, null, e, 1 <argumentos .length, null,! 0)}, removeData: function (e) {retorna this.each (function () {G.remove (this, e)})}}), E.extend ({fila: function (e , t, n) {var r; se (e) retornar t = (t || "fx") + "fila", r = Y.get (e, t), n && (! r || Array.isArray ( n)? r = Y.access (e, t, E.makeArray (n)): r.push (n)), r || []}, desenfileirar: função (e, t) {t = t || "fx"; var n = E.(e, t), r = n.length, i = n.shift (), o = E._queueHooks (e, t); "inprogress" === i && (i = n.shift (), r- -), i && ("fx" === t && n.unshift ("inprogress"), exclua o.stop, i.call (e, function () {E.dequeue (e, t)}, o)) ,! r && o && o.empty.fire ()}, _ queueHooks: function (e, t) {var n = t + "queueHooks"; retorna Y.get (e, n) || Y.access (e, n, {vazio: E. Retornos de chamada ("uma vez memória"). Add (function () {Y.remove (e, [t + "fila", n])})})}})), E.fn.extend ({fila: function (t, n) {var e = 2; return "string"! = tipo de t && (n = t, t = "fx", e -), argumentos.length <e? E.queue (this [0], t): void 0 === n? this: this.each (function () {var e = E.queue (this, t, n); E._queueHooks (this, t), "fx" === && "inprogress" ! == e [0] && E.quequeue (this, t)})}, desenfileire: function (e) {retorne this.each (function () {E.dequeue (this, e)})},clearQueue: function (e) {retorna this.queue (e || "fx", [])}, promessa: function (e, t) {var n, r = 1, i = E.Deferred (), o = this, a = this.length, s = function () {- r || i.resolveWith (o, [o])}; "string"! = tipo de e && (t = e, e = nulo 0), e = e || "fx"; while (a -) (n = Y.get (o [a], e + "queueHooks")) && n.empty && (r ++, n.empty.add (s)); return s (), i.promise (t)}}); var ee = / [+ -]? (?: \ d * \. |) \ d + (?: [eE] [+ -]? \ d + |) / .source, te = new RegExp ("^ (?: ([+ -]) = |) (" + ee + ") ([az%] *) $", "i"), ne = ["Top", "Direita", "Inferior", "Esquerda"], re = w.documentElement, ie = função (e) {retorne E.contains (e.ownerDocument, e)}, oe = {composta:! 0}; re. getRootNode && (ie = function (e) {return E.contains (e.ownerDocument, e) || e.getRootNode (oe) === e.ownerDocument}); var ae = function (e, t) {return "none "=== (e = t || e) .style.display || "" === e.style.display && ie (e) && "none" === E.css (e, "display")}; var se = {}; função ue (e, t) {para (var n, r, i, o, a, s, u, l = [], c = 0, f = comprimento.c; c <f; c ++) (r = e [c]). style && (n = r.style.display, t? ("nenhum" === n && (l [c] = Y.get (r, "exibição") || nulo, l [c] || (r.style.display = " "))," "=== r.style.display && ae (r) && (l [c] = (u = a = o = vazio 0, a = (i = r) .ownerDocument, s = i.nodeName, (u = se [s]) || (o = a.body.appendChild (a.createElement (s)), u = E.css (o, "exibição"), o.parentNode.removeChild (o), " none "=== u && (u =" bloco "), se [s] = u)))):" none "! == n && (l [c] =" none ", exibição Y.set (r," ", n))); para (c = 0; c <f; c ++) null! = l [c] && (e [c] .style.display = l [c]); return e} E.fn. estender ({show: function () {retornar ue (this,! 0)}, ocultar:function () {return ue (this)}, alterna: function (e) {return "boolean" == tipo de e? e? this.show (): this.hide (): this.each (function () {ae (this)? E (this) .show (): E (this) .hide ()})}}); var le, ce, fe = / ^ (?: caixa de seleção | radio) $ / i, de = / <([az] [^ \ / \ 0> \ x20 \ t \ r \ n \ f] *) / i, pe = / ^ $ | ^ module $ | \ / (?: java | ecma) script / i ; le = w.createDocumentFragment (). appendChild (w.createElement ("div")), (ce = w.createElement ("input")). setAttribute ("type", "radio"), ce.setAttribute (" marcado "," marcado "), ce.setAttribute (" nome "," t "), le.appendChild (ce), m.checkClone = le.cloneNode (! 0) .cloneNode (! 0) .lastChild.checked, le.innerHTML = "<textarea> x </textarea>", m.noCloneChecked = !! le.cloneNode (! 0) .lastChild.defaultValue, le.innerHTML = "<opção> </option>", m.option = !! le.lastChild; var he = {thead: [1,"<table>", "</table>"], col: [2, "<table> <colgroup>", "</colgroup> </table>"], tr: [2, "<table> < tbody> "," </tbody> </table> "], td: [3," <table> <tbody> <tr> "," </tr> </tbody> </table> "], _ padrão : [0, "", ""]}; function ge (e, t) {var n; return n = "undefined"! = Tipo de e.getElementsByTagName? E.getElementsByTagName (t || "*"): "undefined "! = tipo de e.querySelectorAll? e.querySelectorAll (t ||" * "): [], nulo 0 === t || t && S (e, t)? E.merge ([e], n): n } função ve (e, t) {para (var n = 0, r = e.length; n <r; n ++) Y.set (e [n], "globalEval",! t || Y.get (t [n], "globalEval"))} he.tbody = he.tfoot = he.colgroup = he.caption = ele.thead, he.th = he.td, m.option || (he.optgroup = ele.option = [1, "<select multiple = 'multiple'>", "</select>"]); var ye = / <| & #? \ w +; /; função me (e, t, n, r, i) {for (var o, a, s, u, l, c, f = t.createDocumentFragment (), d = [], p = 0, h = comprimento.p; p <h; p ++) if (( o = e [p]) || 0 === o) if ("objeto" === T (o)) E.merge (d, o.nodeType? [o]: o); caso contrário, se (ye. teste (o)) {a = a || f.appendChild (t.createElement ("div")), s = (de.exec (o) || ["", ""]) [1] .toLowerCase ( ), u = he [s] || he._default, a.innerHTML = u [1] + E.htmlPrefilter (o) + u [2], c = u [0]; enquanto (c -) a = a.lastChild; E.merge (d, a.childNodes), (a = f.firstChild) .textContent = ""} else d.push (t.createTextNode (o)); f.textContent = "", p = 0; while (o = d [p ++]) if (r && - 1 <E.inArray (o, r)) i && i.push (o); caso contrário, se (l = ie (o), a = ge (f.appendChild (o), "script"), l && ve (a), n) {c = 0; enquanto (o = a [c ++]) pe.test (o.type || "") && n.push (o)} retornar f} var ser = / ^ tecla /, xe = / ^ (?: mouse | ponteiro | contextomenu | arrastar | soltar) | clicar em /, nós = / ^ ([^.] *) (?: \. (. +) |) /; função Ce () {retorno! 0} função Te () {retorno! 1} função Ee (e, t) {retorno e === função () {try { return w.activeElement} catch (e) {}} () == ("foco" === t)} função Ae (e, t, n, r, i, o) {var a, s; if (" objeto "== tipo de t) {para (s em" string "! = tipo de n && (r = r || n, n = nulo 0), t) Ae (e, s, n, r, t [s], o); return e} if (null == r && null == i? (i = n, r = n = vazio 0): null == i && ("string" == tipo de n? (i = r, r = vazio) 0) :( i = r, r = n, n = nulo 0)), 1 === i) i = Te; caso contrário, se (! I) retornar e; retornar 1 === o && (a = i, (i = função (e) {retorna E (). off (e), a.apply (this, argumentos)}). guid = a.guid || (a.guid = E.guid ++)), e.each (function () {E.event.add (this, t, i, r, n)})} função Ne (e, i, o) {o? (Y.set (e, i,! 1), E .event.add (e, i, {namespace:! 1, manipulador: function (e) {var t, n, r = Y.get (this, i);if (1 & e.isTrigger && this [i]) {if (r.length) (E.event.special [i] || {}). delegateType && e.stopPropagation (); else if (r = s.call (argumentos), Y .set (this, i, r), t = o (this, i), this [i] (), r! == (n = Y.get (this, i)) || t? Y.set ( this, i,! 1): n = {}, r! == n) retorna e.stopImmediatePropagation (), e.preventDefault (), n.value} else r.length && (Y.set (this, i, { valor: E.event.trigger (E.extend (r [0], E.Event.prototype), r.slice (1), este)}), e.stopImmediatePropagation ())}}): void 0 = == Y.get (e, i) && E.event.add (e, i, Ce)} E.event = {global: {}, adicione: function (t, e, n, r, i) {var o , a, s, u, l, c, f, d, p, h, g, v = Y.get (t); if (X (t)) {n.handler && (n = (o = n). manipulador, i = o.selector), i && E.find.matchesSelector (re, i), n.guid || (n.guid = E.guid ++), (u = v.eventos) || (u = v.events = Object.create (null)), (a = v.handle) || (a = v.handle = function (e) {retorna "indefinido"! = Tipo de E && E.event.triggered! == e.tipo? E.event.dispatch.apply (t, argumentos): void 0}), l = (e = (e || ""). match (H) || [""]). length; while (l -) p = g = (s = we.exec (e [l]) || []) [1], h = (s [2] || ""). split ("."). sort ( ), p && (f = E.event.special [p] || {}, p = (i? f.delegateType: f.bindType) || p, f = E.event.special [p] || {} , c = E.extend ({type: p, origType: g, dados: r, manipulador: n, guid: n.guid, seletor: i, needsContext: i && E.expr.match.needsContext.test (i), namespace : h.join (".")}, o), (d = u [p]) || ((d = u [p] = []). delegateCount = 0, f.setup &&! 1! == f .setup.call (t, r, h, a) || t.addEventListener && t.addEventListener (p, a)), f.add && (f.add.call (t, c), c.handler.guid || ( c.handler.guid = n.guid)), i? d.splice (d.delegateCount ++, 0, c): d.push (c), E.event.global [p] =! 0)}}, remova : função (e, t, n, r, i) {var o, a, s, u, l, c, f, d, p, h, g, v = Y.hasData (e) && Y.get (e ); if (v && (u = v.eventos)) {l = (t = (t || ""). match (H) || [""]). length; while (l -) if (p = g = (s = we.exec ( t [l]) || []) [1], h = (s [2] || ""). split ("."). sort (), p) {f = E.event.special [p ] || {}, d = u [p = (r? f.delegateType: f.bindType) || p] || [], s = s [2] && new RegExp ("(^ | \\.)" + h.join ("\\. (?:. * \\. |)") + "(\\. | $)"), a = o = d.length; enquanto (o -) c = d [o] ,! i && g! == c.origType || n && n.guid! == c.guid || s &&! s.test (c.namespace) || r && r! == c.selector && ("**"! == r ||! c.selector) || (d.splice (o, 1), c.selector && d.delegateCount -, f.remove && f.remove.call (e, c)); a &&! d.length && ( f.teardown &&! 1! == f.teardown.call (e, h, v.handle) || E.removeEvent (e, p, v.handle), exclua u [p])} else for (p em u ) E.event.remove (e, p + t [l], n, r,! 0); E.isEmptyObject (u) && Y.remove (e, "manipular eventos")}},expedição: função (e) {var t, n, r, i, o, a, s = nova matriz (argumentos.length), u = E.event.fix (e), l = (Y.get (this, "events") || Object.create (null)) [u.type] || [], c = E.event.special [u.type] || {}; para (s [0] = u, t = 1; t <argumentos.length; t ++) s [t] = argumentos [t]; if (u.delegateTarget = this,! C.preDispatch ||! 1! == c.preDispatch.call (this, u) ) {a = E.event.handlers.call (this, u, l), t = 0; while ((i = a [t ++]) &&! u.isPropagationStopped ()) {u.currentTarget = i.elem, n = 0; while ((o = i.handlers [n ++]) &&! u.isImmediatePropagationStopped ()) u.rnamespace &&! 1! == o.namespace &&! u.rnamespace.test (o.namespace) || (u .handleObj = o, u.data = o.data, void 0! == (r = ((E.event.special [o.origType] || {}). handle || o.handler) .apply (i .elem, s)) &&! 1 === (u.result = r) && (u.preventDefault (), u.stopPropagation ()))} return c.postDispatch && c.postDispatch.call (this, u), u .result}}, manipuladores:função (e, t) {var n, r, i, o, a, s = [], u = t.delegateCount, l = e.target; if (u && l.nodeType &&! ("click" === e. digite && 1 <= e.button)) para (; l! == this; l = l.parentNode || this) if (1 === l.nodeType && ("clique"! == e.type ||! 0! == l.disabled)) {for (o = [], a = {}, n = 0; n <u; n ++) nulo 0 === a [i = (r = t [n]). seletor + " "] && (a [i] = r.needsContext? -1 <E (i, this) .index (l): E. encontrar (i, this, null, [l]). length), a [i] && o.push (r); o.length && s.push ({elem: l, manipuladores: o})} retorne l = this, u <t.length && s.push ({elem: l, manipuladores: t.slice (u) }), s}, addProp: function (t, e) {Object.defineProperty (E.Event.prototype, t, {enumerable:! 0, configurable:! 0, get: b (e)? function () {if (this.originalEvent) retorna e (this.originalEvent)}: function () {if (this.originalEvent) retorna this.originalEvent [t]}, define: function (e) {Object.defineProperty (this, t, {enumerable :! 0,configurável:! 0, gravável:! 0, valor: e})}})}, correção: função (e) {return e [E.expando]? e: novo E.Event (e)}, especial: {load : {noBubble:! 0}, clique em: {setup: function (e) {var t = this || e; retorne fe.test (t.type) && t.click && S (t, "input") && Ne (t, " clique em ", Ce) ,! 1}, trigger: function (e) {var t = this || e; return fe.test (t.type) && t.click && S (t," input ") && Ne (t", clique em ") ,! 0}, _ padrão: função (e) {var t = e.target; retorna fe.test (t.type) && t.click && S (t," input ") && Y.get (t," clique ") || S (t, "a")}}, antes da descarga: {postDispatch: function (e) {void 0! == e.result && e.originalEvent && (e.originalEvent.returnValue = e.result)}}}}, E .removeEvent = function (e, t, n) {e.removeEventListener && e.removeEventListener (t, n)}, E.Event = function (e, t) {if (! (nesta instância de E.Event)) return new E.Event (e, t); e && e.type? (This.originalEvent = e, this.type = e.type, this.isDefaultPrevented = e.defaultPrevented || void 0 === e.defaultPrevented && ! 1 === e.returnValue? Ce: Te, this.target = e.target && 3 === e.target.nodeType? E.target.parentNode: e.target, this.currentTarget = e.currentTarget, this.relatedTarget = e.relatedTarget): this.type = e, t && E.extend (this, t), this.timeStamp = e && e.timeStamp || Date.now (), this [E.expando] =! 0}, E.Event .prototype = {construtor: E.Event, isDefaultPrevented: Te, isPropagationStopped: Te, isImmediatePropagationStopped: Te, isSimulated:! 1, preventDefault: function () {var e = this.originalEvent; this.isDefaultPrevented = Ce, e && this. isSimulated && e.preventDefault ()}, stopPropagation: function () {var e = this.originalEvent; this.isPropagationStopped = Ce, e && this.isSimulated && e.stopPropagation ()}, stopImmediatePropagation: function () {var e = this.originalEvent; this.isImmediatePropagationStopped = Ce, e &&! this.isSimulated && e.stopImmediatePropagation (), this.stopPropagation ()}}, E.each! 0, bolhas:! 0, cancelável:! 0, alteradoToca:! 0, ctrlKey:! 0, detalhe:! 0, eventPhase:! 0, metaKey:! 0, páginaX:! 0, páginaY:! 0, shiftKey :! 0, visualização:! 0, "char":! 0, código:! 0, charCode:! 0, chave:! 0, keyCode:! 0, botão:! 0, botões:! 0, clientX:! 0, clientY :! 0, offsetX:! 0, offsetY:! 0, pointerId:! 0, pointerType:! 0, screenX:! 0, screenY:! 0, targetTouches:! 0, toElement:! 0, toques:! 0, que : function (e) {var t = e.button; return null == e.que &&teste (e.type)? null! = e.charCode? e.charCode: e.keyCode:! e.which && void 0! = = t && xe.test (e.type)? 1 & t? 1: 2 & t? 3: 4 & t? 2: 0: e.qual}}, E.event.addProp), E.each ({focus: "focusin", blur: "focusout"},function (e, t) {E.event.special [e] = {setup: function () {return Ne (this, e, Ee) ,! 1}, trigger: function () {return Ne (this, e) ,! 0}, delegateType: t}}), E.each ({mouseenter: "mouseover", mouseleave: "mouseout", ponteiro: "ponteiro", ponteiro: "ponteiro"}, função (e, i) {E .event.special [e] = {delegateType: i, bindType: i, handle: function (e) {var t, n = e.relatedTarget, r = e.handleObj; return n && (n === this || E .contains (this, n)) || (e.type = r.origType, t = r.handler.apply (isso, argumentos), e.type = i), t}}}), E.fn.extend ({on: function (e, t, n, r) {return Ae (this, e, t, n, r)}, one: function (e, t, n, r) {return Ae (this, e, t, n, r, 1)}, off: function (e, t, n) {var r, i; if (e && e.preventDefault && e.handleObj) return r = e.handleObj, E (e.delegateTarget) .off ( r.namespace? r.origType + "." + r.namespace: r.origType, r.selector, r.handler), this; if ("object"== typeof e) {para (i in e) this.off (i, t, e [i]); retorne}} retorne! 1! == t && "function"! = typeof t || (n = t, t = void 0) ,! 1 === n && (n = Te), this.each (function () {E.event.remove (this, e, n, t)})}}); var Se = / <script | <estilo | <link / i, ke = / marcado \ s * (?: [^ =] | = \ s *. verificado.) / i, De = / ^ \ s * <! (?: \ [CDATA \ [| -) | (?: \] \] | -)> \ s * $ / g; função Le (e, t) {retorna S (e, "tabela") && S (11! = = t.nodeType? t: t.firstChild, "tr") && E (e) .children ("tbody") [0] || e} função je (e) {return e.type = (null! == e .getAttribute ("type")) + "/" + e.type, e} função qe (e) {return "true /" === (e.type || ""). slice (0,5)? e.type = e.type.slice (5): e.removeAttribute ("type"), e} função Oe (e, t) {var n, r, i, o, a, s; if (1 == = t.nodeType) {if (Y.hasData (e) && (s = Y.get (e) .events)) para (i em Y.remove (t, "manipular eventos"),s) para (n = 0, r = s [i] .length; n <r; n ++) E.event.add (t, i, s [i] [n]); G.hasData (e) && ( o = G.access (e), a = E. extender ({}, o), G.set (t, a))}} função Pe (n, r, i, o) {r = v (r) ; var e, t, a, s, u, l, c = 0, f = comprimento n, d = f-1, p = r [0], h = b (p); if (h || 1 <f && "string" == tipo de p &&! m.checkClone && ke.test (p)) retorna n.each (função (e) {var t = n.eq (e); h && (r [0] = p.call ( isso, e, t.html ())), Pe (t, r, i, o)}); if (f && (t = (e = me (r, n [0] .ownerDocument,! 1, n, o)). firstChild, 1 === e.childNodes.length && (e = t), t || o)) {for (s = (a = E.map (ge (e, "script"), je) ) .length; c <f; c ++) u = e, c! == d && (u = E.clone (u,! 0,! 0), s && E.merge (a, ge (u, "script")) ), i.call (n [c], u, c); if (s) for (l = a [a.length-1] .ownerDocument, E.map (a, qe), c = 0; c < s; c ++) u = a [c], pe.test (u.type || "") &&! Y.access (u, "globalEval") && E. contém (l, u) && (u.src && "module"! == (u.type || ""). toLowerCase ()? E._evalUrl &&! u.noModule && E._evalUrl (u.src, {nonce: u.nonce || u.getAttribute ("nonce" )}, l): C (u.textContent.replace (De, ""), u, l))} retornar n} função He (e, t, n) {para (var r, i = t? E. filter (t, e): e, o = 0; null! = (r = i [o]); o ++) n || 1! == r.nodeType || E.cleanData (ge (r)), r .parentNode && (n && ie (r) && ve (ge (r, "script")), r.parentNode.removeChild (r)); return e} E.extend ({htmlPrefilter: function (e) {return e}, clone: função (e, t, n) {var r, i, o, a, s, u, l, c = e.cloneNode (! 0), f = ie (e); if (! (m.noCloneChecked || 1! == e.nodeType && 11! == e.nodeType || E.isXMLDoc (e))) para (a = ge (c), r = 0, i = (o = ge (e)). Length; r <i; r ++) s = o [r], u = a [r], nulo 0, "entrada" === (l = u.nodeName.toLowerCase ()) && fe.test (s.type)? u. verificado = s.checked: "input"! == l && "área de texto "! == l || (u.defaultValue = s.defaultValue); if (t) if (n) para (o = o || ge (e), a = a || ge (c), r = 0, i = o.length; r <i; r ++) Oe (o [r], a [r]); caso contrário Oe (e, c); return 0 <(a = ge (c, "script")) .length && ve (a,! f && ge (e, "script")), c}, cleanData: function (e) {for (var t, n, r, i = E.event.special, o = 0; void 0! == (n = e [o]); o ++) if (X (n)) {if (t = n [Y.expando]) {if (t.eventos) para (r em t.events) i [r ]? E.event.remove (n, r): E.removeEvent (n, r, t.handle); n [Y.expando] = void 0} n [G.expando] && (n [G.expando] = void 0)}}}), E.fn.extend ({desanexar: função (e) {retornar He (isto, e,! 0)}, remover: função (e) {retornar Ele (este, e)} , text: function (e) {return $ (this, function (e) {return void 0 === e? E.text (this): this.empty (). each (function () {1! == this .nodeType && 11! == this.nodeType && 9! == this.nodeType || (this.textContent = e)})}, null, e, argument.length)}, acrescente: function () {return Pe (this,argumentos, função (e) {1! == this.nodeType && 11! == this.nodeType && 9! == this.nodeType || Le (this, e) .appendChild (e)})}, prepend: function () {return Pe (argumentos, função (e) {if (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) {var t = Le (this, e); t.insertBefore (e, t.firstChild)}})}, before: function () {return Pe (this, argumentos, função (e) {this.parentNode && this.parentNode.insertBefore (e, this)})}, depois : function () {retorna Pe (argumentos, função (e) {this.parentNode && this.parentNode.insertBefore (e, this.nextSibling)})}, vazio: function () {for (var e, t = 0; null! = (e = this [t]); t ++) 1 === e.nodeType && (E.cleanData (ge (e,! 1)), e.textContent = ""); retorne isso}, clone: ​​function (e, t) {retornar e = nulo! = e && e, t = nulo == t? e: t, this.map (function () {retornar E.clone (este, e, t)})}, html: função (e) {return $ (isto, função (e) {var t = isto [0] || {},n = 0, r = this.length; if (void 0 === e && 1 === t.nodeType) retorna t.innerHTML; if ("string" == tipo de e &&! Se.test (e) &&! he [ (de.exec (e) || ["", ""]) [1] .toLowerCase ()]) {e = E.htmlPrefilter (e); tente {for (; n <r; n ++) 1 == = (t = this [n] || {}). nodeType && (E.cleanData (ge (t,! 1)), t.innerHTML = e); t = 0} captura (e) {}} t && this.empty () .append (e)}, null, e, argument.length)}, replaceWith: function () {var n = []; retorna Pe (este, argumentos, função (e) {var t = this.parentNode; E.inArray (this, n) <0 && (E.cleanData (ge (this)), t && t.replaceChild (e, this))}, n)}}), E.each ({appendTo: "append", prependTo : "prepend", insertBefore: "before", insertAfter: "after", replaceAll: "replaceWith"}, função (e, a) {E.fn [e] = função (e) {for (var t, n = [], r = E (e), i = r.length-1, o = 0; o <= i; o ++) t = o === i? this: this.clone (! 0),E (r [o]) [a] (t), u.apply (n, t.get ()); retorna this.pushStack (n)}}); var Ie = new RegExp ("^ (" + ee + ") (?! px) [az%] + $", "i"), Re = function (e) {var t = e.ownerDocument.defaultView; return t &&op.opener || (t = g), t. getComputedStyle (e)}, Be = função (e, t, n) {var r, i, o = {}; para (i in t) o [i] = e.style [i], e.style [i ] = t [i]; para (i em r = n.call (e), t) e.style [i] = o [i]; retorne r}, Me = new RegExp (ne.join ("|" ), "i"); function We (e, t, n) {var r, i, o, a, s = e.style; return (n = n || Re (e)) && (""! = = (a = n.getPropertyValue (t) || n [t]) || ie (e) || (a = E.style (e, t)) ,! m.pixelBoxStyles () && Ie.test (a) && Teste.t (t) && (r = s.width, i = s.minWidth, o = s.maxWidth, s.minWidth = s.maxWidth = s.width = a, a = n.width, s.width = r, s.minWidth = i, s.maxWidth = o)), void 0! == a? a + "": a} função Fe (e, t) {return {get: function () {if (! e ( )) return (this.get = t) .apply (this,argumentos); exclua this.get}}}! function () {function e () {if (l) {u.style.cssText = "position: absolute; left: -11111px; width: 60px; margin-top: 1px ; padding: 0; border: 0 ", l.style.cssText =" posição: relativa; display: block; tamanho da caixa: border-box; estouro: rolagem; margem: auto; border: 1px; padding: 1px; width : 60%; superior: 1% ", re.appendChild (u) .appendChild (l); var e = g.getComputedStyle (l); n =" 1% "! == e.top, s = 12 == = t (e.marginLeft), l.style.right = "60%", o = 36 === t (e.right), r = 36 === t (e.width), l.style.position = "absoluto", i = 12 === t (l.offsetWidth / 3), re.removeChild (u), l = null}} função t (e) {retorna Math.round (parseFloat (e))} var n, r, i, o, a, s, u = w.createElement ("div"), l = w.createElement ("div"); l.style && (l.style.backgroundClip = "content-box", l.cloneNode (! 0) .style.backgroundClipunction () {var e = this.ownerDocument || this.document || this, t = Y.access (e, r) -1; t? Y.access (e, r, t) :( e.removeEventListener ( n, i,! 0), Y.remove (e, r))}}}), E.parseXML = function (e) {var t; if (! e || "string"! = typeof e) return null ; try {t = (new g.DOMParser) .parseFromString (e, "text / xml")} catch (e) {t = void 0} retorna t &&! t.getElementsByTagName ("parsererror"). length || E. erro ("XML inválido:" + e), t}; var ft, dt = / \ [\] $ /, pt = / \ r? \ n / g, ht = / ^ (?: enviar | botão | imagem | | reset | arquivo) $ / i, gt = / ^ (?: input | select | textarea | keygen) / i; function vt (n, e, r, i) {var t; if (Array.isArray (e) ) E.each (e, função (e, t) {r || dt.test (n)? I (n, t): vt (n + "[" + ("objeto" == objeto "== tipo de t && null! = T? e: "") + "]", t, r, i)}); senão se (r || "objeto"! == T (e)) i (n, e); senão para (t em e) vt (n + "[" + t + "]", e [t], r, i)} E.param = função (e, t) {var n,r = [], i = função (e, t) {var n = b (t)? t (): t; r [comprimento.r] = encodeURIComponent (e) + "=" + encodeURIComponent (null == n ? "": n)}; if (null == e) return ""; if (Array.isArray (e) || e.jquery &&! E.isPlainObject (e)) E.each (e, function () { i (this.name, this.value)}); else for (n em e) vt (n, e [n], t, i); retorne r.join ("&")}, E.fn.extend ({serialize: function () {retorne E.param (this.serializeArray ())}, serializeArray: function () {retorne this.map (function () {var e = E.prop (this, "elements"); return e? E.makeArray (e): this}). filter (function () {var e = this.type; retorna this.name &&! E (this) .is (": disabled") && gt.test (this. nodeName) &&! ht.test (e) && (this.checked ||! fe.test (e))}). map (function (e, t) {var n = E (this) .val (); return null == n? null: Array.isArray (n)? E.map (n, função (e) {return {nome: t.name, valor: e.replace (pt, "\ r \ n ")}}): {nome: t.name, valor: n.replace (pt," \ r \ n ")}}). get ()}}), E.fn.extend ({ wrapAll: function (e) {var t; retorna este [0] && (b (e) && (e = e.call (this [0])), t = E (e, este [0] .ownerDocument). eq (0) .clone (! 0), este [0] .parentNode && t.insertBefore (this [0]), t.map (function () {var e = this; while (e.firstElementChild) e = e.firstElementChild ; return e}). append (this)), this}, wrapInner: function (n) {return b (n)? this.each (function (e) {E (this) .wrapInner (n.call (this, e))}): this.each (function () {var e = E (this), t = e.contents (); t.length? t.wrapAll (n): e.append (n)})} , wrap: function (t) {var n = b (t); retorna this.each (function (e) {E (this) .wrapAll (n? t.call (this, e): t)})}, desembrulhar: function (e) {retornar this.parent (e) .not ("corpo"). each (function () {E (this) .placeplace with (this.childNodes)}), this}}), E.expr .pseudos.hidden = função (e) {return! E.expr.pseudos.visible (e)}, E.expr.pseudos.visible = function (e) {return !! (e.offsetWidth || e.offsetHeight || e.getClientRects (). length)}, m.createHTMLDocument = ((ft = w.implementation.createHTMLDocument ("") .body) .innerHTML = "<form> </form> <form> </form>", 2 === ft.childNodes.length), E.parseHTML = function (e, t, n) {return "string "! = typeof e? [] :(" boolean "== typeof t && (n = t, t =! 1), t || (m.criarHTMLDocument? ((r = (t = w.implementation.createHTMLDocument (" ")). createElement (" base ")). href = w.location.href, t.head.appendChild (r)): t = w), o =! n && [], (i = k.exec (e ))? [t.createElement (i [1])] :( i = eu ([e], t, o), o && o.length && E (o) .remove (), E.merge ([], i.childNodes ))); var r, i, o}, E.offset = {setOffset: function (e, t, n) {varr, i, o, a, s, u, l = E.css (e, " posição "), c = E (e), f = {};" estático "=== l&& (estilo e.posição = "relativo"), s = c.offset (), o = E.css (e, "superior"), u = E.css (e, "esquerda"), ("absoluto" === l | | "Fixed" === l) && - 1 <(o + u) .indexOf ("auto")? (a = (r = c.position ()). top, i = r.left) :( a = parseFloat (o) || 0, i = parseFloat (u) || 0), b (t) && (t = chamada de chamada (e, n, E. extender ({}, s))), nulo! = t.top && (f.top = t.top-s.top + a), null! = t.left && (f.left = t.left-s.left + i), "usando" em t? t. using.call (e, f) :( "número" == tipo de f.top && (f.top + = "px"), "número" == tipo de f.left && (f.left + = "px"), c. css (f))}}, E.fn.extend ({offset: function (t) {if (argument.length) retorna nulo 0 === t? this: this.each (function (e) {E.offset .setOffset (this, t, e)}); var e, n, r = this [0]; return r? r.getClientRects (). length? (e = r.getBoundingClientRect (), n = r.ownerDocument. defaultView, {top: e.top + n.pageYOffset,left: e.left + n.pageXOffset}): {top: 0, left: 0}: void 0}, position: function () {if (this [0]) {var e, t, n, r = this [0], i = {top: 0, esquerda: 0}; if ("fixo" === E.css (r, "posição")) t = r.getBoundingClientRect (); else {t = this.offset (), n = r.ownerDocument, e = r.offsetParent || n.documentElement; while (e && (e === n.body || e === n.documentElement) && "static" === E. css (e, "position")) e = e.parentNode; e && e! == r && 1 === e.nodeType && ((i = E (e) .offset ()). top + = E.css (e, "borderTopWidth ",! 0), i.left + = E.css (e," borderLeftWidth ",! 0))} return {top: t.top-i.top-E.css (r," marginTop ",! 0) , left: t.left-i.left-E.css (r, "marginLeft",! 0)}}}, offsetParent: function () {retorna this.map (function () {var e = this.offsetParent; while (e && "estático" === E.css (e, "posição")) e = e.offsetParent; return e || re})}}), E.cada ({scrollLeft: "pageXOffset", scrollTop: "pageYOffset"}, função (t, i) {var o = "pageYOffset" === i; E.fn [t] = function (e) {return $ (this , função (e, t, n) {var r; if (x (e)? r = e: 9 === tipo e.node && (r = e.defaultView), vazio 0 === n) retorna r? r [i]: e [t]; r? r.scrollTo (o? r.pageXOffset: n, o? n: r.pageYOffset): e [t] = n}, t, e, argumentos. comprimento)}} ), E.each (["top", "left"], função (e, n) {E.cssHooks [n] = Fe (m.pixelPosition, função (e, t) {se (t) retornar t = Nós (e, n), Ie.teste (t)? E (e) .position () [n] + "px": t})}), E.each ({Altura: "altura", Largura: " largura "}, função (a, s) {E.each ({padding:" inner "+ a, content: s," ":" outer "+ a}, função (r, o) {E.fn [o ] = função (e, t) {var n = argumentos.length && (r || "booleano"! = tipo de e), i = r || (! 0 === e ||! 0 === t? " margin ":" border "); return $ (this,função (e, t, n) {var r; return x (e)? 0 === o.indexOf ("externo")? e ["interno" + a]: e.document.documentElement ["client" + a]: 9 === e.nodeType? (r = e.documentElement, Math.max (e.body ["rolagem" + a], r ["rolagem" + a], r ["rolagem" + a], e.body ["deslocamento" + a], r ["deslocamento" + a], r ["cliente" + a])): void 0 === n E.css (e, t, i): E.style (e, t, n , i)}, s, n? e: void 0, n)}})}), E.fn.extend ({bind: function (e, t, n) {retorna this.on (e, null, t , n)}, unbind: function (e, t) {retorna this.off (e, null, t)}, delega: function (e, t, n, r) {retorna this.on (t, e, n , r)}, undelegate: function (e, t, n) {retornar 1 === argumentos.length? this.off (e, "**"): this.off (t, e || "**" , n)}, hover: function (e, t) {retorna this.mouseenter (e) .mouseleave (t || e)}}), E.each ("desfocar o foco foco no foco redimensionar rolagem clique em dblclique mouse com mouse desativado mouse com mouse sobre mouse mouse mouse mouse mouseleave alterar selecionar enviar tecla pressionada tecla pressionada keyup contextmenu ".split (" "), função (e, n) {E.fn [n] = função (e, t) {return 0 <argument.length? this.on (n, null, e, t): this.trigger (n)}}); var yt = / ^ [\ s \ uFEFF \ xA0] + | [\ s \ uFEFF \ xA0] + $ / g; E.proxy = função (e, t) {var n, r, i; if ("string" == tipo de t && (n = e [t], t = e, e = n), b (e)) retorna r = s.call (argumentos, 2), (i = função () {retorna e.apply (t || isso, r.concat (s.call (argumentos)))} ) .guid = e.guid = e.guid || E.guid ++, i}, E.holdReady = função (e) {e? E.readyWait ++: E.ready (! 0)}, E.isArray = Matriz. isArray, E.parseJSON = JSON.parse, E.nodeName = S, E.isFunction = b, E.isWindow = x, E.camelCase = V, E.type = T, E.now = Date.now, E. isNumeric = função (e) {var t = E.tipo (e); return ("number" === t || "string" === t) &&! isNaN (e-parseFloat (e))}, E.trim = function (e) {return null == e? "" :( e + ""). replace (yt, "")}, "function" = = typeof define && define.amd && define ("jquery", [], função () {retornar E}); var mt = g.jQuery, bt = g. $; return E.noConflict = function (e) {return g. $ = == E && (g. $ = Bt), e && g.jQuery === E && (g.jQuery = mt), E}, "indefinido" == tipo de e && (g.jQuery = g. $ = E), E} );jQuery = g. $ = E), E});jQuery = g. $ = E), E});